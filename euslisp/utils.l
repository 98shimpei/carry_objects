(defun savelog (&optional (fname "carryobject"))
  (progn
    (send *ri* :set-log-maxlength 2000000)
    (send *ri* :start-log)
    (read-line) 
    (send *ri* :save-log (format nil "~A~A" "/home/shimpei/log/" fname))
    )
  )

(defun mv ()
  (objects (list *robot*))
  t
  )

(defun logstart (&optional (fname "carryobject"))
  (progn
    (send *ri* :set-log-maxlength 2000000)
    (send *ri* :start-log)))

(defun logstop (&optional (fname "carryobject"))
    (send *ri* :save-log (format nil "~A~A" "/home/shimpei/log/" fname))
    )

(defun go-coop-pose ()
  (send *robot* :larm :inverse-kinematics (make-coords :pos #f(550 180 1200) :rpy (list 0 0 0)))
  (send *robot* :rarm :inverse-kinematics (make-coords :pos #f(550 -180 1200) :rpy (list 0 0 0)))
  (send *robot* :head :angle-vector #f(0 10))
  (send *ri* :angle-vector (send *robot* :angle-vector) 3000)
  (send *ri* :wait-interpolation)
  )

(defun go-lift-pose ()
  (send *robot* :larm :inverse-kinematics (make-coords :pos #f(450 320 1200) :rpy (list 0 0 (deg2rad 90))))
  (send *robot* :rarm :inverse-kinematics (make-coords :pos #f(450 -320 1200) :rpy (list 0 0 (deg2rad -90))))
  (send *ri* :angle-vector (send *robot* :angle-vector) 3000)
  (send *ri* :wait-interpolation)
  )

(defun go-reset-pose ()
  (send *ri* :angle-vector (send *robot* :reset-pose))
  (send *ri* :wait-interpolation)
  )

(defun go-sit-pose ()
  (send *robot* :torso-waist-p :joint-angle 30)
  (send *robot* :legs :crotch-p :joint-angle -30)
  (send *robot* :fix-leg-to-coords (make-coords))
  (send *robot* :legs :move-end-pos #f(150 0 400))
  (send *robot* :fix-leg-to-coords (make-coords))
  (send *robot* :larm :inverse-kinematics (make-coords :pos #f(500 400 250) :rpy (list 0 (deg2rad 40) (deg2rad 90))))
  (send *robot* :rarm :inverse-kinematics (make-coords :pos #f(500 -400 250) :rpy (list 0 (deg2rad 40) (deg2rad -90))))
  (send *ri* :angle-vector (send *robot* :angle-vector) 10000)
  (send *ri* :wait-interpolation)
  )

(defun go-new-pose ()
  (send *robot* :reset-pose)
  (send *robot* :larm :inverse-kinematics (make-coords :pos #f(480 180 1200) :rpy (list (deg2rad -20) (deg2rad -30) (deg2rad 80))))
  (send *robot* :rarm :inverse-kinematics (make-coords :pos #f(480 -180 1200) :rpy (list (deg2rad 20) (deg2rad -30) (deg2rad -80))))
  (send *ri* :angle-vector (send *robot* :angle-vector) 3000)
  (send *ri* :wait-interpolation)
  (send *ri* :stop-impedance :arms)
  (send *ri* :start-impedance :arms :K-r 100.0 :D-r 100.0 :M-r 1
                                    :K-p 700.0 :D-p 700.0 :M-p 5)
  )

(defun govel (&optional (wait-time 5))
  (send *ri* :go-velocity 0 0 0)
  (unix:sleep wait-time)
  (send *ri* :go-stop)
  )

(defun capture-pose ()
  (print "3")
  (unix:sleep 1)
  (print "2")
  (unix:sleep 1)
  (print "1")
  (unix:sleep 1)
  (print "0")
  (send *robot* :angle-vector (send *ri* :state :potentio-vector))
  (send *ri* :angle-vector (send *robot* :angle-vector)))

(defun send-pose ()
  (send *robot* :angle-vector (send *ri* :reference-vector))
  (send *ri* :angle-vector (send *robot* :angle-vector))
  )
