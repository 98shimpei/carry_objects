#!/usr/bin/env roseus

(load "package://hrpsys_ros_bridge_tutorials/euslisp/jaxon_red-interface.l")
(ros::load-ros-manifest "jsk_recognition_msgs")

(jaxon_red-init)
(setq *robot* *jaxon_red*)

(defun force->vec (force)
  (float-vector (send force :x) (send force :y) (send force :z)))

(defun update-larm (msg)
  (setq *hogemsg* msg)
  (send *robot* :angle-vector (send *ri* :state :potentio-vector))
  (setq *larm-force* (force->vec (send msg :Wrench :force)))
  (setq *now_time* (send msg :Header :seq))
  (setq lh-coords (send (car (send *robot* :force-sensors)) :copy-worldcoords))
  (setq *larm-force* (matrix-row (m* (matrix *larm-force*) (transpose (send lh-coords :rot))) 0))
  (if (not (boundp '*larm-force-offset*)) (progn (setq *larm-force-offset* *larm-force* ) (setq *start_time* *now_time*)))
  (setq *larm-force* (v- *larm-force* *larm-force-offset*))
  (setq *lflag* nil)
  t
  )

(defun update-rarm (msg)
  (send *robot* :angle-vector (send *ri* :state :potentio-vector))
  (setq *rarm-force* (force->vec (send msg :Wrench :force)))
  (setq rh-coords (send (cadr (send *robot* :force-sensors)) :copy-worldcoords))
  (setq *rarm-force* (matrix-row (m* (matrix *rarm-force*) (transpose (send rh-coords :rot))) 0))
  (if (not (boundp '*rarm-force-offset*)) (setq *rarm-force-offset* *rarm-force*))
  (setq *rarm-force* (v- *rarm-force* *rarm-force-offset*))
  (setq *rflag* nil)
  t
  )

(defun force-subscribe ()
  (ros::roseus "force-listener")
  (setq *larm-force* #f(0 0 0))
  (setq *rarm-force* #f(0 0 0))
  (setq *larm-force-1* #f(0 0 0))
  (setq *rarm-force-1* #f(0 0 0))
  (setq *larm-force-2* #f(0 0 0))
  (setq *rarm-force-2* #f(0 0 0))
  (setq *before-time* 0.0)
  (setq *lflag* t)
  (setq *rflag* t)
  (ros::subscribe "lhsensor" geometry_msgs::WrenchStamped #'update-larm)
  (ros::subscribe "rhsensor" geometry_msgs::WrenchStamped #'update-rarm)
  (ros::spin-once)
  (while (ros::ok)
    (while (or *lflag* *rflag*) (ros::spin-once))
    (setq *lflag* t)
    (setq *rflag* t)
    (setq F 2.0)
    (setq *now_time* (/ (float *now_time*) 100.0))
    (setq dt (- *now_time* *before-time*))
    ;; (setq tmpl (v+ (scale (- 1.0 (* F dt)) *larm-force-2*) (scale F *larm-force*) (scale (* -1.0 F) *larm-force-1*)))
    (setq tmpl (v+ (scale (- 1 (* dt F)) *larm-force-2*) (scale (* F dt) *larm-force-1*)))
    (setq tmpr (v+ (scale (- 1 (* dt F)) *rarm-force-2*) (scale (* F dt) *rarm-force-1*)))
    (format t "~A ~A ~A ~A ~A ~A ~A ~A~%"
      *now_time*
;;      (/ (+ (elt *larm-force* 0) (elt *larm-force-1* 0) (elt *larm-force-2* 0)) 3.0)
;;      (/ (+ (elt *larm-force* 1) (elt *larm-force-1* 1) (elt *larm-force-2* 1)) 3.0)
;;      (/ (+ (elt *larm-force* 2) (elt *larm-force-1* 2) (elt *larm-force-2* 2)) 3.0)
;;      (/ (+ (elt *rarm-force* 0) (elt *rarm-force-1* 0) (elt *rarm-force-2* 0)) 3.0)
;;      (/ (+ (elt *rarm-force* 1) (elt *rarm-force-1* 1) (elt *rarm-force-2* 1)) 3.0)
;;      (/ (+ (elt *rarm-force* 2) (elt *rarm-force-1* 2) (elt *rarm-force-2* 2)) 3.0)
      (elt tmpl 0)
      (elt tmpl 1)
      (elt tmpl 2)
      (elt tmpr 0)
      (elt tmpr 1)
      (elt tmpr 2)
      (elt *larm-force* 2)
      )
    (setq *larm-force-2* tmpl)
    (setq *larm-force-1* *larm-force*)
    (setq *rarm-force-2* tmpr)
    (setq *rarm-force-1* *rarm-force*)
    (setq *before-time* *now_time*)
    )
  )
(force-subscribe)
